{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores.js","../../src/components/LfmForm.svelte","../../src/components/SpotifyLogin.svelte","../../src/components/CreatePlaylist.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { readable, writable } from 'svelte/store';\r\n\r\nexport const token = readable(null, function start(set) {\r\n  const hashParams = {};\r\n  const r = /([^&;=]+)=?([^&;]*)/g;\r\n  const q = window.location.hash.substring(1);\r\n  let e;\r\n  while (e = r.exec(q)) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n  }\r\n  const access_token = hashParams.access_token;\r\n  set(access_token);\r\n\r\n  window.history.pushState(\"object or string\", \"Title\", \"/\");\r\n\r\n})\r\n\r\nexport const appUrl = readable(null, function start(set) {\r\n  // set(\"https://leorehm.github.io/lastfm-spotify\");\r\n  set(\"http://localhost:8080/\");\r\n})\r\n\r\nexport const timeRange = writable('medium_term');\r\n\r\nexport const tokenExpired = writable(false);\r\n\r\nexport const trackdata = writable(null);","<script>\r\n\timport { timeRange, token, tokenExpired, trackdata } from \"../stores.js\";\r\n\t$: username = \"\";\r\n\tconst period = [\"overall\", \"7day\", \"1month\", \"3month\", \"6month\", \"12month\"];\r\n\tlet chosenPeriod = \"7day\";\r\n\tlet limit = 20;\r\n\tconst apiKey = \"57411198178c595fbb09fabbe83934ac\";\r\n\tlet __trackdata;\r\n\tlet output = \"\";\r\n\tlet nextButtonDisabled = true;\r\n\r\n\tasync function onSubmit() {\r\n\t\tconsole.log(\"username: \", username);\r\n\t\ttry {\r\n\t\t\t__trackdata = await fetchLfmData();\r\n\t\t} catch(e) {\r\n\t\t\toutput = trackdata.toString();\r\n\t\t\treturn;\r\n\t\t} \r\n\t\t\r\n\t\tif(output != \"\") output = \"\";\r\n\r\n\t\tfor(let i = 0; i<__trackdata.length; i++) {\r\n\t\t\toutput += i+1 + \": \"\r\n\t\t\toutput += __trackdata[i].artist.name + \" - \";\r\n\t\t\toutput += __trackdata[i].name + \"\\r\\n\";\r\n\t\t}\r\n\r\n\t\tif (output==\"\") {\r\n\t\t\toutput = \"It seems there are no songs available for the selected username and/or time period.\";\r\n\t\t\tnextButtonDisabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tnextButtonDisabled = false;\r\n\t}\r\n\r\n\tfunction onNext() {\r\n\t\t$trackdata = __trackdata;\r\n\t}\r\n\r\n\t// TODO: input username, period, limit and api key as parameter with URLSeachParams()\r\n\tasync function fetchLfmData() {\r\n\t\tlet res;\r\n\t\tconsole.log(\"fetching last.fm data...\")\r\n\t\tconst url = \"https://ws.audioscrobbler.com/2.0/?method=user.gettoptracks&user=\" + username + \"&period=\" + chosenPeriod + \"&limit=\" + limit + \"&api_key=\" + apiKey + \"&format=json\";\r\n\t\tawait fetch(url)\r\n\t\t\t.then(response => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} \r\n\t\t\t\tthrow new Error(\"No songs found. User may not exist or have songs scrobbled during the selected timeframe.\")\r\n\t\t\t})\r\n\t\t\t.then(data => {\r\n\t\t\t\tres = data.toptracks.track;\r\n\t\t\t\tconsole.log(\"...done!\")\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres = error;\r\n\t\t\t});\r\n\t\treturn res;\r\n\t}\r\n</script>\r\n\r\n<div class=\"container\">\r\n\t<form class=\"item-form\" on:submit|preventDefault={onSubmit}>\r\n\t<div>\r\n\t\t<label class=\"form-label\" for=\"username\">last.fm Username</label>\r\n\t\t<input class=\"form-input\" name=\"username\" type=text bind:value={username}><br>\r\n\t</div>\r\n\t<div>\r\n\t\t<label class=\"form-label\" for=\"limit\">Track Limit</label>\r\n\t\t<input class=\"form-input\" name=\"limit\" type=number bind:value={limit} min=1 max=100><br>\r\n\t</div>\r\n\t<div>\r\n\t<label class=\"form-label\" for=\"period\">Time Period</label>\r\n\t\t<select class=\"form-input\" name=\"period\" bind:value={chosenPeriod}>\r\n\t\t\t{#each period as period}\r\n\t\t\t\t<option>{period}</option>\r\n\t\t\t{/each}\r\n\t\t</select><br>\r\n\t</div>\r\n\t</form>\r\n\t<button class=\"pure-button-primary\" id=\"submit-button\" disbaled={username = \"\"} on:click={onSubmit}>Get Data <i class=\"fa-brands fa-lastfm\"></i></button>\r\n\t\r\n\t<div class=\"item-output\">\r\n\t\t<label for=\"output\" class=form-label>Songs retrieved from last.fm</label>\r\n\t\t<textarea readonly id=\"song-output\" name=\"song-output\" rows=limit cols=50 bind:value={output}></textarea>\r\n\t</div>\r\n\t<button class=\"pure-button-primary\" id=\"next-button\" disabled={nextButtonDisabled} on:click={onNext}>Next</button>\r\n</div>\r\n<style>\r\n\t.container {\r\n\t\t/* display: grid;\r\n\t\tgrid-template-columns: 1fr 1fr, 1fr; */\r\n\t\t\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tflex-basis: auto;\r\n\t\talign-items: center;\r\n\t\talign-content: center;\r\n\t}\r\n\t.form-label {\r\n\t\tmargin: 10px 0 10px 0;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n\t}\r\n\t.form-input {\r\n\t\tgrid-row: 1;\r\n\t\theight: 2.2em;\r\n\t\twidth: 15rem;\r\n\t}\r\n    #song-output {\r\n\t\t/* height: 10em;\r\n\t\twidth: 95vw; */\r\n\t\theight: 20rem;\r\n\t\twidth: 15rem;\r\n\t}\r\n\t#submit-button {\r\n\t\t/* height: 2em;\r\n\t\twidth: 80% */\r\n\t\tmargin: 10px 0 10px 0;\r\n\t\twidth: 15rem;\r\n\t}\r\n\t#next-button {\r\n\t\t/* height: 2em;\r\n\t\twidth: 20em;\r\n\t\ttransform: translate(50%, 50%);\r\n\t\tleft: 50%; */\r\n\t\tmargin: 10px 0 10px 0;\r\n\t\twidth: 15rem;\r\n\t}\r\n\t.pure-button-primary {\r\n\t\tborder-radius: 12px;\r\n\t}\r\n</style>","<script>\r\n    import { token, tokenExpired, appUrl } from \"../stores.js\";\r\n\r\n    const client_id = \"e27568bbeef44f7db83b446e2d6f57ab\";\r\n\r\n    function generateRandomString(length) {\r\n        let text = \"\";\r\n        const possible =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n        for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n        return text;\r\n    }\r\n\r\n    const url = new URL(\"https://accounts.spotify.com/authorize?\");\r\n    const scope = \"user-read-private playlist-modify-public playlist-modify-private\";\r\n    const state = generateRandomString(16);\r\n    let rememberMe = true;\r\n    $: params = new URLSearchParams({\r\n        response_type: \"token\",\r\n        show_dialog: !rememberMe, // Will show up on first sign-on regardless\r\n        client_id,\r\n        scope,\r\n        redirect_uri: $appUrl,\r\n        state,\r\n    });\r\n    $: loginLink = url + params;\r\n\r\n</script>\r\n\r\n{#if !$token}\r\n  <div id=\"login\">\r\n    <a href={loginLink}>\r\n      <button class=\"pure-button pure-button-primary\" id=\"login-btn\">Connect to Spotify</button>\r\n    </a>\r\n    <br />\r\n    <div id=\"checkbox-container\">\r\n      <label id=\"checkbox-label\" for=\"remember-me\">Remember me?</label>\r\n      <input\r\n        id=\"checkbox-box\"\r\n        name=\"remember-me\"\r\n        type=\"checkbox\"\r\n        bind:checked={rememberMe}\r\n      />\r\n    </div>\r\n  </div>\r\n{/if}\r\n\r\n{#if $tokenExpired}\r\n  <section class=\"expired-token\">\r\n    <p>Token expired! Please log out and log back in again.</p>\r\n    <a href={$appUrl}>\r\n      <button>Logout</button>\r\n    </a>\r\n  </section>\r\n{/if}\r\n\r\n\r\n<style>\r\n\r\n#login {\r\n  margin: auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n  /* align-items: center;\r\n  display: flex;\r\n  justify-content: center; */\r\n}\r\n#login-btn {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  height: 3rem;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n\r\n  font-weight: bold;\r\n  font-size: 125%;\r\n}\r\n\r\n.pure-button-primary {\r\n  border-radius: 12px;\r\n}\r\n#checkbox-container {\r\n  position: absolute;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n}\r\n#checkbox-label {\r\n  display: inline-block;\r\n  text-align: center;\r\n  margin: auto;\r\n  font-weight: bold;\r\n}\r\n\r\n#checkbox-box{\r\n  display: inline-block;\r\n  margin: auto;\r\n}\r\n\r\n\r\n</style>","<script>\r\n    import { token, timeRange, tokenExpired, trackdata} from \"../stores.js\";\r\n    let playlistName = \"last.fm top \" + $trackdata.length;\r\n    let playlistDesc = \"\";\r\n    let playlistScope = true; // true: public, false: private\r\n    let playlistLink = \"\";\r\n    let user_id;\r\n    let playlistInfo;\r\n    let message = \"\";\r\n    const spotInsertRest = 100; // spotify restriction of only 100 songs per insertion\r\n\r\n    async function getUser() {\r\n        message = \"Please wait: getting user data...\";\r\n        const accessToken = $token;\r\n\r\n        const res = await fetch('https://api.spotify.com/v1/me', {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: \"Bearer \" + accessToken,\r\n            },\r\n        })\r\n        .then(response => response.json())\r\n\t\t\t.then(data => {\r\n                user_id = data.id;\r\n\t\t});\r\n    }\r\n\r\n    async function createPlaylist() {\r\n        // https://developer.spotify.com/documentation/web-api/reference/#/operations/create-playlist\r\n        await getUser();\r\n        message = \"Please wait: Playlist is being created...\";\r\n        console.log(\"creating playlist for user \", user_id);\r\n        const accessToken = $token;\r\n\r\n        const res = await fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: \"Bearer \" + accessToken, \r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": playlistName,\r\n                \"public\": playlistScope,\r\n                \"description\": playlistDesc,\r\n                \"public\": false\r\n            })\r\n        })\r\n\r\n        if(res.ok) {\r\n            playlistInfo = await res.json();\r\n        } else {\r\n            tokenExpired.set(true);     \r\n        }\r\n        \r\n        addToPlaylist();\r\n    }\r\n\r\n    async function getSongId(track, artist) {\r\n        // https://developer.spotify.com/documentation/web-api/reference/#/operations/search\r\n        // query could be optimized for higher accuracy\r\n        \r\n        // console.log(\"searching for: \", track, \" - \", artist);\r\n\r\n        const url = `https://api.spotify.com/v1/search?q=track:${track}%20artist:${artist}&type=track&limit=5`;\r\n        const accessToken = $token;\r\n        let id;\r\n        const res = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                Authorization: \"Bearer \" + accessToken,\r\n            },\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error(\"Track '\" + track + \"' not found - skipping\");\r\n        })\r\n        .then(data => {\r\n            if (data.tracks.items.length == 0) {\r\n                throw new Error(\"Track '\" + track + \"'' not found - skipping\");\r\n            }\r\n            else {\r\n                console.log(\"track_id found: \", data.tracks.items[0].uri);\r\n                id = data.tracks.items[0].uri;\r\n            }\r\n\t\t})\r\n        .catch(error => {\r\n            console.log(error);\r\n            id = null;\r\n        });\r\n        return id;\r\n    }\r\n\r\n    async function addToPlaylist() {\r\n        // https://developer.spotify.com/documentation/web-api/reference/#/operations/add-tracks-to-playlist\r\n        message = \"Please wait: Getting songs...\";\r\n\r\n        // get all song ids\r\n        // group ids in arrays with length of spotInsertRest to comply with spotify api\r\n\r\n        const indexesNeeded = Math.floor($trackdata.length/spotInsertRest) //counting from 0\r\n        const ids = new Array(Math.floor(indexesNeeded));\r\n        for (let i = 0; i <= indexesNeeded; i++) {\r\n            ids[i] = [];\r\n        }\r\n\r\n        for (let i = 0; i < $trackdata.length; i++) {\r\n            let j = Math.floor(i/spotInsertRest);\r\n            let songId = await getSongId($trackdata[i].name, $trackdata[i].artist.name);\r\n            // prevents adding a song with an empty id, which would cause the whole api-call to fail\r\n            if (songId != null) {\r\n                ids[j].push(songId);\r\n            }\r\n        }\r\n        // console.log(\"finished getting track ids:\", ids);\r\n        \r\n        // add songs to playlist\r\n        message = \"Please wait: Adding songs to playlist...\";\r\n\r\n        const accessToken = $token;\r\n        const url = `https://api.spotify.com/v1/playlists/${playlistInfo.id}/tracks`\r\n\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: \"Bearer \" + accessToken,\r\n                },\r\n                body: JSON.stringify({\r\n                    uris: ids[i],\r\n                })\r\n            })\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                }\r\n                throw new Error(\"Adding to playlist not successful\");\r\n            })\r\n            .then(data => {\r\n                console.log('add to playlist RESPONSE: ', data);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                message = \"Oh no, something went wrong!\";\r\n            });\r\n        }\r\n\r\n        playlistLink = playlistInfo.external_urls.spotify;\r\n        message = \"Success!\";\r\n    }\r\n\r\n</script>\r\n    <div class=\"container\">\r\n\r\n    <label class=\"label\" for=\"playlist-name\">Playlist Name</label>\r\n    <input class=\"input\" name=\"playlist-name\" type=text bind:value={playlistName}><br>\r\n\r\n    <label class=\"label\" for=\"playlist-desc\">Description</label>\r\n    <input class=\"input\" name=\"playlist-desc\" type=text bind:value={playlistDesc}><br>\r\n    \r\n    <label for=\"playlist-scope\" class=\"label\">Visibility</label>\r\n    <div name=\"playlist-scope\" class=\"pure-button-group\" role=\"group\">\r\n        <button id=\"public-button\" class=\"toggle-button\" class:active={playlistScope} on:click=\"{() => playlistScope = !playlistScope}\">Public</button>\r\n        <button id=\"private-button\" class=\"toggle-button\" class:active={!playlistScope} on:click=\"{() => playlistScope = !playlistScope}\">Private</button>\r\n    </div>\r\n\r\n    <button class=\"pure-button-primary\" on:click|once={createPlaylist}>Create Playlist <i class=\"fa-brands fa-spotify\"></i></button>\r\n\r\n    <p style=\"margin: 10px 0 10px 0;\">{message}</p>\r\n\r\n    {#if playlistLink != \"\"}\r\n    <div class=\"playlist-link\">\r\n        <label for=\"playlist-link\" class=\"label\">Playlist Link</label>\r\n        <input name=\"playlist-link\" type=\"text\" class=\"input\" bind:value={playlistLink}><br>\r\n        <a href={playlistLink}><button class=\"pure-button-primary\" href={playlistLink}>Open Playlist <i class=\"fa-brands fa-spotify\"></i></button></a>\r\n    </div>\r\n    {/if}\r\n</div>\r\n<style>\r\n    .container {\r\n        display: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tflex-basis: auto;\r\n\t\talign-items: center;\r\n\t\talign-content: center;\r\n    }\r\n    .label {\r\n        margin: 10px 0 10px 0;\r\n\t\tfont-weight: bold;\r\n\t\ttext-align: center;\r\n    }\r\n    .input {\r\n        grid-row: 1;\r\n\t\theight: 2.2em;\r\n\t\twidth: 15rem;\r\n    }\r\n    .pure-button-primary {\r\n\t\tborder-radius: 12px;\r\n        margin: 10px 0 10px 0;\r\n\t\twidth: 15rem;\r\n\t}\r\n    .pure-button-group {\r\n        margin: 0 0 10px 0;\r\n        justify-content: stretch;\r\n        border-radius: 12px;\r\n        width: 15rem;\r\n    }\r\n\r\n    .toggle-button {\r\n        font-size: 90%;\r\n        background-color: #005db3;\r\n        color: #333;\r\n        width: 50%;\r\n    }\r\n    .active {\r\n        font-size: 100%;\r\n        color: white;\r\n        background-color: #0078e7;\r\n    }\r\n    #public-button {\r\n        border-radius: 12px 0 0 12px;\r\n    }\r\n\r\n    #private-button {\r\n        border-radius: 0 12px 12px 0;\r\n    }\r\n</style>","<script>\r\n\timport LfmForm from \"./components/LfmForm.svelte\";\r\n\timport SpotifyLogin from \"./components/SpotifyLogin.svelte\";\r\n\timport CreatePlaylist from \"./components/CreatePlaylist.svelte\"\r\n\timport { timeRange, token, tokenExpired, trackdata } from \"./stores.js\";\r\n\r\n</script>\r\n\r\n<div id=\"app\">\r\n\t<div id=\"head\">\r\n\t\t<h2 style=\"text-align: center\">last.fm to spotify playlist</h2>\r\n\t</div>\r\n\r\n\t<main id=\"main\">\r\n\t\t{#if !$token || $tokenExpired}\r\n\t\t\t<SpotifyLogin></SpotifyLogin>\r\n\t\t{:else if !$trackdata}\r\n\t\t\t<LfmForm></LfmForm>\r\n\t\t{:else if $token && $trackdata }\r\n\t\t\t<CreatePlaylist></CreatePlaylist>\r\n\t\t{/if}\r\n\t</main>\r\n\r\n\r\n\t<footer id=\"footer\">\r\n\t\t<a href=\"https://github.com/leorehm/lastfm-spotify\" target=\"_blank\">\r\n\t\t\t<i class=\"fa-brands fa-github\"></i> Source\r\n\t\t</a>\r\n\t</footer>\r\n</div>\r\n\t\r\n<style>\r\n\th2 {\r\n\t\ttext-align:center;\r\n\t}\r\n\ta {\r\n\t\ttext-align: center;\r\n\t\tcolor: white;\r\n\t\ttext-decoration: none;\r\n\t\ttext-decoration-color: white;\r\n\t}\r\n\ta:hover {\r\n\t\ttext-decoration: underline;\r\n\t}\r\n\t#app {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t}\r\n\t#footer {\r\n\t\ttext-align: center;\r\n\t\tmargin: 10px;\r\n\t\tfont-size: 0.9em;\r\n\t}\r\n\t#main {\r\n\t\tflex-grow: 1;\r\n\t\t}\r\n</style>\r\n\r\n\r\n\r\n","import App from './App.svelte';\r\n\r\nvar app = new App({\r\n\ttarget: document.body\r\n});\r\n\r\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","to_number","set_input_value","input","select_option","select","i","length","option","__value","selected","selectedIndex","toggle_class","toggle","classList","current_component","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","readable","start","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","token","hashParams","r","q","window","location","hash","substring","e","exec","decodeURIComponent","access_token","history","pushState","appUrl","tokenExpired","trackdata","call","button0","button0_disbaled_value","div4","form","div0","label0","input0","br0","div1","label1","input1","br1","div2","label2","br2","div3","label3","textarea","button1","preventDefault","iterations","apiKey","period","__trackdata","chosenPeriod","limit","output","nextButtonDisabled","$$invalidate","username","console","log","res","url","fetch","response","ok","json","Error","toptracks","track","catch","error","fetchLfmData","toString","artist","$trackdata","selected_option","querySelector","select_value","button","br","label","section","create_if_block_1","create_if_block","URL","state","possible","charAt","Math","floor","random","generateRandomString","rememberMe","params","URLSearchParams","response_type","show_dialog","client_id","scope","redirect_uri","$appUrl","loginLink","checked","div","if_block","key","important","style","removeProperty","setProperty","button2","once","wholeText","spotInsertRest","user_id","playlistInfo","playlistName","playlistDesc","playlistScope","playlistLink","message","getSongId","accessToken","$token","id","method","headers","Authorization","tracks","items","uri","getUser","body","JSON","stringify","public","description","indexesNeeded","ids","j","songId","uris","external_urls","spotify","addToPlaylist","main","footer"],"mappings":"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"}